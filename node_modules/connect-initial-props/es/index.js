import _regeneratorRuntime from "@babel/runtime/regenerator";
import _extends from "@babel/runtime/helpers/esm/extends";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import mapDispatchToPropsFactories from 'react-redux/lib/connect/mapDispatchToProps';
import mapStateToPropsFactories from 'react-redux/lib/connect/mapStateToProps'; // @see https://github.com/reduxjs/react-redux/blob/0c048f0646/src/connect/connect.js#L25-L38

var match = function match(arg, factories, name) {
  return factories.map(function (factory) {
    return factory(arg);
  }).find(function (x) {
    return x;
  }) || function () {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument.");
  };
};

var connectInitialProps = function connectInitialProps(mapStateToProps, mapDispatchToProps) {
  if (mapStateToProps === void 0) {
    mapStateToProps = null;
  }

  if (mapDispatchToProps === void 0) {
    mapDispatchToProps = null;
  }

  return function (target, name, descriptor) {
    var originalGetInitialProps = descriptor.value;

    descriptor.value = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {
        var _args$ctx, ctx, query, store, dispatch, getState, preliminaryProps, initMapStateToProps, initMapDispatchToProps, getStateProps, stateProps, props;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Support both pages and _app.js
                _args$ctx = args.ctx, ctx = _args$ctx === void 0 ? args : _args$ctx;
                query = ctx.query, store = ctx.store;
                dispatch = store.dispatch, getState = store.getState;
                preliminaryProps = _extends({}, query); // prettier-ignore

                initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps')(dispatch, {});
                initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps')(dispatch);

                getStateProps = function getStateProps() {
                  return initMapStateToProps(getState(), preliminaryProps);
                };

                stateProps = Object.fromEntries(Object.keys(getStateProps()).map(function (name) {
                  return [name, {
                    enumerable: true,
                    get: function get() {
                      return getStateProps()[name];
                    }
                  }];
                }));
                props = _extends({}, preliminaryProps, {}, initMapDispatchToProps());
                Object.defineProperties(props, stateProps);
                _context.t0 = _extends;
                _context.t1 = {};
                _context.t2 = preliminaryProps;
                _context.t3 = {};
                _context.next = 16;
                return originalGetInitialProps(args, props);

              case 16:
                _context.t4 = _context.sent;
                return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2, _context.t3, _context.t4));

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    return descriptor;
  };
};

export default connectInitialProps;