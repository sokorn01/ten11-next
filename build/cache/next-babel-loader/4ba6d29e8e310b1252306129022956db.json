{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\"; // BINDING MIDDLEWARE\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst makeStore = ({\n  isServer\n}) => {\n  if (isServer) {\n    //If it's on server side, create a store\n    return createStore(rootReducer, bindMiddleware([thunkMiddleware]));\n  } else {\n    //If it's on client side, create a store which will persist\n    const {\n      persistStore,\n      persistReducer\n    } = require(\"redux-persist\");\n\n    const storage = require(\"redux-persist/lib/storage\").default;\n\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"counter\"],\n      // only counter will be persisted, add other reducers if needed\n      storage // if needed, use a safer storage\n\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer); // Create a new reducer with our existing reducer\n\n    const store = createStore(persistedReducer, bindMiddleware([thunkMiddleware])); // Creating the store again\n\n    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\n\n    return store;\n  }\n}; // Export the wrapper & wrap the pages/_app.js with this wrapper only\n\n\nexport const wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["/Users/sosokorn/Documents/Project/ten11-web-reactjs-nextjs/store/store.js"],"names":["createStore","applyMiddleware","createWrapper","HYDRATE","thunkMiddleware","rootReducer","bindMiddleware","middleware","composeWithDevTools","require","makeStore","isServer","persistStore","persistReducer","storage","default","persistConfig","key","whitelist","persistedReducer","store","__persistor","wrapper"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,oBAAvC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB,C,CAGA;;AACA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACP,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAON,eAAe,CAAC,GAAGM,UAAJ,CAAtB;AACD,CAND;;AAQA,MAAMG,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC,MAAIA,QAAJ,EAAc;AACZ;AACA,WAAOX,WAAW,CAACK,WAAD,EAAcC,cAAc,CAAC,CAACF,eAAD,CAAD,CAA5B,CAAlB;AACD,GAHD,MAGO;AACL;AACA,UAAM;AAAEQ,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,QAAmCJ,OAAO,CAAC,eAAD,CAAhD;;AACA,UAAMK,OAAO,GAAGL,OAAO,CAAC,2BAAD,CAAP,CAAqCM,OAArD;;AACA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,GAAG,EAAE,QADe;AAEpBC,MAAAA,SAAS,EAAE,CAAC,SAAD,CAFS;AAEI;AACxBJ,MAAAA,OAHoB,CAGX;;AAHW,KAAtB;AAKA,UAAMK,gBAAgB,GAAGN,cAAc,CAACG,aAAD,EAAgBX,WAAhB,CAAvC,CATK,CASgE;;AACrE,UAAMe,KAAK,GAAGpB,WAAW,CACvBmB,gBADuB,EAEvBb,cAAc,CAAC,CAACF,eAAD,CAAD,CAFS,CAAzB,CAVK,CAaF;;AAEHgB,IAAAA,KAAK,CAACC,WAAN,GAAoBT,YAAY,CAACQ,KAAD,CAAhC,CAfK,CAeoC;;AAEzC,WAAOA,KAAP;AACD;AACF,CAvBD,C,CAyBA;;;AACA,OAAO,MAAME,OAAO,GAAGpB,aAAa,CAACQ,SAAD,CAA7B","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\n\n// BINDING MIDDLEWARE\nconst bindMiddleware = (middleware) => {\n  if (process.env.NODE_ENV !== \"production\") {\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\n\nconst makeStore = ({ isServer }) => {\n  if (isServer) {\n    //If it's on server side, create a store\n    return createStore(rootReducer, bindMiddleware([thunkMiddleware]));\n  } else {\n    //If it's on client side, create a store which will persist\n    const { persistStore, persistReducer } = require(\"redux-persist\");\n    const storage = require(\"redux-persist/lib/storage\").default;\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"counter\"], // only counter will be persisted, add other reducers if needed\n      storage, // if needed, use a safer storage\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer); // Create a new reducer with our existing reducer\n    const store = createStore(\n      persistedReducer,\n      bindMiddleware([thunkMiddleware])\n    ); // Creating the store again\n\n    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\n\n    return store;\n  }\n};\n\n// Export the wrapper & wrap the pages/_app.js with this wrapper only\nexport const wrapper = createWrapper(makeStore);"]},"metadata":{},"sourceType":"module"}