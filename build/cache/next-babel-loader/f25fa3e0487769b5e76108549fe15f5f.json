{"ast":null,"code":"import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { fetchMenu } from \"../../store/actions/menuAction\";\nimport { useStore } from \"../../store\";\n\nvar useSticky = function useSticky() {\n  var _useState = useState(false),\n      isSticky = _useState[0],\n      setSticky = _useState[1];\n\n  var _useState2 = useState(false),\n      hideNav = _useState2[0],\n      setHideNav = _useState2[1];\n\n  var element = useRef(null);\n  var store = useStore();\n\n  if (true) {\n    var prevScrollpos = window.pageYOffset;\n  }\n\n  var handleScroll = function handleScroll() {\n    var currentScrollPos = window.pageYOffset;\n\n    if (element.current) {\n      if (parseInt(currentScrollPos) <= 0) {\n        setHideNav(false);\n        setSticky(false);\n        return;\n      } else {\n        if (currentScrollPos <= prevScrollpos) {\n          setHideNav(false);\n          setSticky(false);\n        } else {\n          setHideNav(true);\n          setSticky(true);\n          store.dispatch(fetchMenu);\n        }\n      }\n\n      prevScrollpos = currentScrollPos;\n    }\n  }; // This function handle the scroll performance issue\n\n\n  function debounce(func) {\n    var _arguments = arguments,\n        _this = this;\n\n    var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var timeOut;\n    return function () {\n      var context = _this,\n          args = _arguments;\n\n      var later = function later() {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      var callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n\n  var scrollHandler = useCallback(function () {\n    debounce(handleScroll());\n  }, []);\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky: isSticky,\n    element: element,\n    hideNav: hideNav\n  };\n};\n\nexport default useSticky;","map":null,"metadata":{},"sourceType":"module"}