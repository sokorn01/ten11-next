{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport \"../productList.css\";\nimport Layout from \"../../components/layouts/Layout\";\nimport Container from \"../../components/Containers/Container\";\nimport \"antd/dist/antd.css\";\nimport ProductItem from \"../../components/Products/ProductItem\";\nimport useSticky from \"../../shared/hooks/useSticky\";\nimport ProductListLoading from \"../../components/Loading/ProductListLoading\";\nimport ListSideBarMenu from \"../../components/Products/ListSideBarMenu\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FiRefreshCw } from \"react-icons/fi\";\n\nvar ProductList = function ProductList(props) {\n  var router = useRouter();\n  var _router$query = router.query,\n      page = _router$query.page,\n      id = _router$query.id,\n      slug = _router$query.slug;\n  var hideNav = useSticky.hideNav;\n\n  var _useState = useState(true),\n      hasMore = _useState[0],\n      setHasMore = _useState[1];\n\n  var _useState2 = useState([]),\n      listProduct = _useState2[0],\n      setListProduct = _useState2[1]; // useEffect(() => {\n  //   if (\n  //     props.props.product !== undefined &&\n  //     props.props.product.list !== undefined\n  //   ) {\n  //     if (Number(page) === 1) {\n  //       setListProduct(props.props.product.list);\n  //       localStorage.setItem(\"totalproduct\", props.props.product.total_record);\n  //     } else if (Number(page) > 1) {\n  //       setListProduct([...listProduct, ...props.props.product.list]);\n  //     }\n  //   }\n  // }, [props.props.product]);\n\n\n  function onChange(e) {\n    console.log(\"checked = \".concat(e.target.checked));\n  }\n\n  var loadItems = function loadItems() {\n    var totalProduct = localStorage.getItem(\"totalproduct\");\n    if (listProduct.length > 0) if (listProduct.length < Number(totalProduct)) {\n      setHasMore(true);\n      router.push(\"/product/\".concat(slug, \"/?id=\").concat(id, \"&&page=\").concat(Number(page) + 1));\n    } else {\n      setHasMore(false);\n    }\n  };\n\n  var refresh = function refresh() {};\n\n  var loader = __jsx(\"div\", {\n    className: \"load-more\"\n  }, __jsx(\"div\", {\n    className: \"load-more-block\",\n    onClick: props.onClick\n  }, __jsx(FiRefreshCw, {\n    className: \"\".concat(hasMore ? \"load-more-icon\" : \"no-load-more\")\n  }), __jsx(\"span\", null, \"Load more...\"))); // if (props.isLoading) return <ProductListLoading />;\n\n\n  if (router.isFallback) {\n    return __jsx(ProductListLoading, null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Container, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(ListSideBarMenu // mainCategory={slug[0]}\n  // paramsId={paramsId}\n  // category_name={slug[0]}\n  , {\n    hideNav: hideNav,\n    onChange: onChange\n  }), __jsx(\"div\", {\n    className: \"main\"\n  }))));\n};\n\n// ProductList.getInitialProps = async (context) => {\n//   const { page, id } = context.query;\n//   try {\n//     const api = serviceApiFormData();\n//     const res = await api.post(\"MenuApp/getMenu\");\n//     const menu = res.data;\n//     const data = {\n//       page: page,\n//       category_id: id,\n//     };\n//     const productList = await api.post(\"ListProduct/getProductList\", data);\n//     const product = productList.data;\n//     return {\n//       props: {\n//         product,\n//         menu,\n//       },\n//     };\n//   } catch {\n//     return {\n//       props: {\n//         product: {},\n//         menu: {},\n//       },\n//     };\n//   }\n// };\nexport var __N_SSG = true;\nexport default ProductList;","map":null,"metadata":{},"sourceType":"module"}