{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FETCH_LOGIN_FAILURE, FETCH_LOGIN_REQUEST, FETCH_LOGIN_SUCCESS } from \"../types\";\nconst initialState = {\n  loading: false,\n  userData: [],\n  error: \"\"\n};\n\nconst accountReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_LOGIN_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case FETCH_LOGIN_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userData: action.payload,\n        loading: false\n      });\n\n    case FETCH_LOGIN_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default accountReducer;","map":{"version":3,"sources":["/Users/sosokorn/Documents/Project/ten11-web-reactjs-nextjs/store/reducers/accountReducer.js"],"names":["FETCH_LOGIN_FAILURE","FETCH_LOGIN_REQUEST","FETCH_LOGIN_SUCCESS","initialState","loading","userData","error","accountReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SACEA,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,UAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,mBAAL;AACE,6CAAYO,KAAZ;AAAmBJ,QAAAA,OAAO,EAAE;AAA5B;;AACF,SAAKF,mBAAL;AACE,6CAAYM,KAAZ;AAAmBH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAApC;AAA6CP,QAAAA,OAAO,EAAE;AAAtD;;AACF,SAAKJ,mBAAL;AACE,6CAAYQ,KAAZ;AAAmBF,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAjC;AAA0CP,QAAAA,OAAO,EAAE;AAAnD;;AACF;AACE,aAAOI,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,cAAf","sourcesContent":["import {\n  FETCH_LOGIN_FAILURE,\n  FETCH_LOGIN_REQUEST,\n  FETCH_LOGIN_SUCCESS,\n} from \"../types\";\n\nconst initialState = {\n  loading: false,\n  userData: [],\n  error: \"\",\n};\n\nconst accountReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_LOGIN_REQUEST:\n      return { ...state, loading: true };\n    case FETCH_LOGIN_SUCCESS:\n      return { ...state, userData: action.payload, loading: false };\n    case FETCH_LOGIN_FAILURE:\n      return { ...state, error: action.payload, loading: false };\n    default:\n      return state;\n  }\n};\n\nexport default accountReducer;\n"]},"metadata":{},"sourceType":"module"}