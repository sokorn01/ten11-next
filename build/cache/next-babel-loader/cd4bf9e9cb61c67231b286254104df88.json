{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nlet store;\nconst persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['metadata']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction initStore(initialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/sosokorn/Documents/Project/ten11-web-reactjs-nextjs/store/index.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","rootReducer","persistReducer","storage","store","persistConfig","key","whitelist","persistedReducer","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,IAAIC,KAAJ;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,SADe;AAEpBH,EAAAA,OAFoB;AAGpBI,EAAAA,SAAS,EAAE,CAAC,UAAD;AAHS,CAAtB;AAMA,MAAMC,gBAAgB,GAAGN,cAAc,CAACG,aAAD,EAAgBJ,WAAhB,CAAvC;;AAEA,SAASQ,SAAT,CAAmBC,YAAnB,EAAiC;AAC/B,SAAOb,WAAW,CAChBW,gBADgB,EAEhBE,YAFgB,EAGhBX,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,MAAMW,eAAe,GAAIC,cAAD,IAAoB;AAAA;;AACjD,MAAIC,MAAM,cAAGT,KAAH,6CAAYK,SAAS,CAACG,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIR,KAAtB,EAA6B;AAC3BS,IAAAA,MAAM,GAAGJ,SAAS,iCACbL,KAAK,CAACU,QAAN,EADa,GAEbF,cAFa,EAAlB,CAD2B,CAK3B;;AACAR,IAAAA,KAAK,GAAGW,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACT,KAAL,EAAYA,KAAK,GAAGS,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AACrC,QAAMN,KAAK,GAAGR,OAAO,CAAC,MAAMe,eAAe,CAACD,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAON,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nlet store;\n\nconst persistConfig = {\n  key: 'primary',\n  storage,\n  whitelist: ['metadata'],\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nfunction initStore(initialState) {\n  return createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  )\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState);\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n    // Reset the current store\n    store = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === \"undefined\") return _store;\n  // Create the store once in the client\n  if (!store) store = _store;\n\n  return _store;\n};\n\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}"]},"metadata":{},"sourceType":"module"}