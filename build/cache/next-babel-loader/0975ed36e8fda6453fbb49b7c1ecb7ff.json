{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { wrapper, State } from \"../../store/store\";\nimport { useRouter } from \"next/router\";\nimport cookieCutter from \"cookie-cutter\";\nimport \"../productList.css\";\nimport Cookies from \"cookies\";\nimport Layout from \"../../components/layouts/Layout\";\nimport Container from \"../../components/Containers/Container\";\nimport \"antd/dist/antd.css\";\nimport ProductItem from \"../../components/Products/ProductItem\";\nimport useSticky from \"../../shared/hooks/useSticky\";\nimport ProductListLoading from \"../../components/Loading/ProductListLoading\";\nimport ListSideBarMenu from \"../../components/Products/ListSideBarMenu\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FiRefreshCw } from \"react-icons/fi\";\nimport { serviceApiFormData } from \"../../shared/hooks/seviceApi\";\n\nconst ProductList = props => {\n  console.log(props.product);\n  const router = useRouter(); // const { page, id, slug } = router.query;\n\n  const page = router.query.page || 1;\n  const {\n    hideNav\n  } = useSticky;\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: listProduct,\n    1: setListProduct\n  } = useState([]);\n  useEffect(() => {\n    if (props.product !== undefined && props.product.list !== undefined) {\n      setHasMore(true);\n\n      if (Number(page) === 1) {\n        setListProduct(props.product.list);\n        localStorage.setItem(\"totalproduct\", props.product.total_record);\n      } else if (Number(page) > 1) {\n        setListProduct([...listProduct, ...props.product.list]);\n      }\n    }\n  }, [props.product]);\n\n  function onChange(e) {\n    console.log(`checked = ${e.target.checked}`);\n  }\n\n  const loadItems = () => {\n    const category_seo = cookieCutter.get(\"category_seo\");\n    const totalProduct = localStorage.getItem(\"totalproduct\");\n    if (listProduct.length > 0) if (listProduct.length < Number(totalProduct)) {\n      setHasMore(true);\n      router.push({\n        pathname: `/product/${category_seo}`,\n        query: {\n          page: `${Number(page) + 1}`\n        },\n        as: `/product/${category_seo}`\n      });\n    } else {\n      setHasMore(false);\n    }\n  };\n\n  const refresh = () => {};\n\n  const loader = __jsx(\"div\", {\n    className: \"load-more\"\n  }, __jsx(\"div\", {\n    className: \"load-more-block\",\n    onClick: props.onClick\n  }, __jsx(FiRefreshCw, {\n    className: `${hasMore ? \"load-more-icon\" : \"no-load-more\"}`\n  }), __jsx(\"span\", null, \"Load more...\"))); // if (props.isLoading) return <ProductListLoading />;\n  // if (router.isFallback) {\n  //   return <ProductListLoading />;\n  // }\n\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null, __jsx(Container, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(ListSideBarMenu // mainCategory={slug[0]}\n  // paramsId={paramsId}\n  // category_name={slug[0]}\n  , {\n    hideNav: hideNav,\n    onChange: onChange\n  }), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(InfiniteScroll, {\n    className: \"rowChild\",\n    dataLength: listProduct.length || 0,\n    next: loadItems,\n    hasMore: hasMore,\n    loader: loader,\n    refreshFunction: refresh,\n    pullDownToRefresh: true,\n    pullDownToRefreshThreshold: 50\n  }, listProduct.map((item, index) => __jsx(ProductItem, _extends({\n    key: index\n  }, item)))))))));\n};\n\nexport const getServerSideProps = async context => {\n  const page = context.query.page || \"1\";\n\n  try {\n    const api = serviceApiFormData();\n    const cookies = new Cookies(context.req, context.res);\n    const category_seo = cookies.get(\"category_seo\");\n    const data = {\n      page: page,\n      seo_url: category_seo\n    };\n    console.log(data);\n    const productList = await api.post(\"ListProductWeb/getProductList\", data);\n    const product = productList.data;\n    return {\n      props: {\n        product\n      }\n    };\n  } catch {\n    return {\n      props: {\n        product: {}\n      }\n    };\n  }\n};\nexport default ProductList;","map":null,"metadata":{},"sourceType":"module"}