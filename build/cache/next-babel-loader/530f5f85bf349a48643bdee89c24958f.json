{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport \"../productList.css\";\nimport Layout from \"../../components/layouts/Layout\";\nimport Container from \"../../components/Containers/Container\";\nimport \"antd/dist/antd.css\";\nimport ProductItem from \"../../components/Products/ProductItem\";\nimport useSticky from \"../../shared/hooks/useSticky\";\nimport ProductListLoading from \"../../components/Loading/ProductListLoading\";\nimport ListSideBarMenu from \"../../components/Products/ListSideBarMenu\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { FiRefreshCw } from \"react-icons/fi\";\nimport { serviceApiFormData } from \"../../shared/hooks/seviceApi\";\n\nconst ProductList = props => {\n  const router = useRouter();\n  const {\n    page,\n    id,\n    slug\n  } = router.query;\n  const {\n    hideNav\n  } = useSticky;\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: listProduct,\n    1: setListProduct\n  } = useState([]);\n  useEffect(() => {\n    if (props.props.product !== undefined && props.props.product.list !== undefined) {\n      if (Number(page) === 1) {\n        setListProduct(props.props.product.list);\n        localStorage.setItem(\"totalproduct\", props.props.product.total_record);\n      } else if (Number(page) > 1) {\n        setListProduct([...listProduct, ...props.props.product.list]);\n      }\n    }\n  }, [props.props.product]);\n\n  function onChange(e) {\n    console.log(`checked = ${e.target.checked}`);\n  }\n\n  const loadItems = () => {\n    const totalProduct = localStorage.getItem(\"totalproduct\");\n    if (listProduct.length > 0) if (listProduct.length < Number(totalProduct)) {\n      setHasMore(true);\n      router.push(`/product/${slug}/?id=${id}&&page=${Number(page) + 1}`);\n    } else {\n      setHasMore(false);\n    }\n  };\n\n  const refresh = () => {};\n\n  const loader = __jsx(\"div\", {\n    className: \"load-more\"\n  }, __jsx(\"div\", {\n    className: \"load-more-block\",\n    onClick: props.onClick\n  }, __jsx(FiRefreshCw, {\n    className: `${hasMore ? \"load-more-icon\" : \"no-load-more\"}`\n  }), __jsx(\"span\", null, \"Load more...\"))); // if (props.isLoading) return <ProductListLoading />;\n\n\n  if (router.isFallback) {\n    return __jsx(ProductListLoading, null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    menu: props.props.menu.menu\n  }, __jsx(Container, null, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(ListSideBarMenu, {\n    mainCategory: slug[0] // paramsId={paramsId}\n    ,\n    category_name: slug[0],\n    hideNav: hideNav,\n    onChange: onChange\n  }), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(InfiniteScroll, {\n    className: \"rowChild\",\n    dataLength: listProduct.length || 0,\n    next: loadItems,\n    hasMore: hasMore,\n    loader: loader,\n    refreshFunction: refresh,\n    pullDownToRefresh: true,\n    pullDownToRefreshThreshold: 50\n  }, listProduct.map((item, index) => __jsx(ProductItem, _extends({\n    key: index\n  }, item)))))))));\n}; // export async function getStaticPaths() {\n//   const api = serviceApiFormData();\n//   const res = await api.post(\"MenuApp/getMenu\");\n//   const paths = res.data.menu.map((a) => ({\n//     params: { id: a.category_id.toString() },\n//   }));\n//   return {\n//     paths,\n//     fallback: true,\n//   };\n// }\n// export async function getStaticProps({ params }) {\n//   console.log(params);\n//   const api = serviceApiFormData();\n//   const res = await api.post(\"MenuApp/getMenu\");\n//   const menu = res.data;\n//   const data = {\n//     page: page,\n//     category_id: id,\n//   };\n//   const productList = await api.post(\"ListProduct/getProductList\", data);\n//   const product = productList.data;\n//   return {\n//     props: {\n//       menu,\n//       product,\n//     },\n//   };\n// }\n\n\nProductList.getInitialProps = async context => {\n  const {\n    page,\n    id\n  } = context.query;\n\n  try {\n    const api = serviceApiFormData();\n    const res = await api.post(\"MenuApp/getMenu\");\n    const menu = res.data;\n    const data = {\n      page: page,\n      category_id: id\n    };\n    const productList = await api.post(\"ListProduct/getProductList\", data);\n    const product = productList.data;\n    return {\n      props: {\n        product,\n        menu\n      }\n    };\n  } catch {\n    return {\n      props: {\n        product: {},\n        menu: {}\n      }\n    };\n  }\n};\n\nexport default ProductList;","map":null,"metadata":{},"sourceType":"module"}