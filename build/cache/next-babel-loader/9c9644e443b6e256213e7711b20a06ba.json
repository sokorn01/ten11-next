{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\"; // BINDING MIDDLEWARE\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (false) {\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nvar makeStore = function makeStore(_ref) {\n  var isServer = _ref.isServer;\n\n  if (isServer) {\n    //If it's on server side, create a store\n    return createStore(rootReducer, bindMiddleware([thunkMiddleware]));\n  } else {\n    //If it's on client side, create a store which will persist\n    var _require2 = require(\"redux-persist\"),\n        persistStore = _require2.persistStore,\n        persistReducer = _require2.persistReducer;\n\n    var storage = require(\"redux-persist/lib/storage\")[\"default\"];\n\n    var persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"counter\"],\n      // only counter will be persisted, add other reducers if needed\n      storage: storage // if needed, use a safer storage\n\n    };\n    var persistedReducer = persistReducer(persistConfig, rootReducer); // Create a new reducer with our existing reducer\n\n    var store = createStore(persistedReducer, bindMiddleware([thunkMiddleware])); // Creating the store again\n\n    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\n\n    return store;\n  }\n}; // Export the wrapper & wrap the pages/_app.js with this wrapper only\n\n\nexport var wrapper = createWrapper(makeStore);","map":null,"metadata":{},"sourceType":"module"}