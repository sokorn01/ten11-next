{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport { createWrapper, HYDRATE } from \"next-redux-wrapper\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\"; // BINDING MIDDLEWARE\n\nconst bindMiddleware = middleware => {\n  if (false) {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst makeStore = ({\n  isServer\n}) => {\n  if (isServer) {\n    //If it's on server side, create a store\n    return createStore(rootReducer, bindMiddleware([thunkMiddleware]));\n  } else {\n    //If it's on client side, create a store which will persist\n    const {\n      persistStore,\n      persistReducer\n    } = require(\"redux-persist\");\n\n    const storage = require(\"redux-persist/lib/storage\").default;\n\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"counter\"],\n      // only counter will be persisted, add other reducers if needed\n      storage // if needed, use a safer storage\n\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer); // Create a new reducer with our existing reducer\n\n    const store = createStore(persistedReducer, bindMiddleware([thunkMiddleware])); // Creating the store again\n\n    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature\n\n    return store;\n  }\n}; // Export the wrapper & wrap the pages/_app.js with this wrapper only\n\n\nexport const wrapper = createWrapper(makeStore);","map":null,"metadata":{},"sourceType":"module"}