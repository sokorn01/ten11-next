{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_META_DATA } from \"../types\";\nconst initialState = {\n  metaData: []\n};\n\nconst metaDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_META_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        metaData: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default metaDataReducer;","map":{"version":3,"sources":["/Users/sosokorn/Documents/Project/ten11-web-reactjs-nextjs/store/reducers/metaDataReducer.js"],"names":["GET_META_DATA","initialState","metaData","metaDataReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,UAA9B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAL;AACE,6CAAYI,KAAZ;AAAmBF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAApC;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AASA,eAAeD,eAAf","sourcesContent":["import { GET_META_DATA } from \"../types\";\n\nconst initialState = {\n  metaData: [],\n};\n\nconst metaDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_META_DATA:\n      return { ...state, metaData: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default metaDataReducer;\n"]},"metadata":{},"sourceType":"module"}